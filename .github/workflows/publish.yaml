name: Publish
concurrency:
  group: ${{ github.workflow }}-${{ inputs.ref || github.event.pull_request.head.ref || github.ref }}
  cancel-in-progress: true
permissions: write-all
defaults:
  run:
    shell: bash
on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  publish:
    timeout-minutes: 45
    name: Publish
    runs-on: ubuntu-latest
    # I don't use matrix to parallel builds, but you can
    steps:
      - name: git checkout / on non-'workflow_call'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          clean: false
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Forward env variables & checkout fixes
        id: gh
        run: |
          echo -n "" > .env
          env | grep -E '^(GITHUB_|CI)' | grep -E GITHUB_SHA= --invert-match | grep -E GITHUB_REF= --invert-match >> $GITHUB_ENV
          env | grep -E '^(GITHUB_|CI)' | grep -E GITHUB_SHA= --invert-match | grep -E GITHUB_REF= --invert-match >> .env
          sha=$(git rev-parse HEAD)
          echo "GITHUB_SHA=$sha" >> $GITHUB_ENV
          echo "GITHUB_SHA=$sha" >> .env
          branch=$(git rev-parse --abbrev-ref HEAD)
          echo "GITHUB_REF=refs/heads/$branch" >> $GITHUB_ENV
          echo "GITHUB_REF=refs/heads/$branch" >> .env
          echo -e "\033[38;5;99;5;16msha: $sha\033[0m"
          echo -e "\033[38;5;99;5;16mbranch: $branch\033[0m"
          echo "sha=$sha" >> $GITHUB_OUTPUT
          echo "branch=$branch" >> $GITHUB_OUTPUT

      - name: Generate version
        id: nbgv
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        with:
          script: |-
            const path = require('path');
            const os = require('os');
            process.env.GITHUB_REF='refs/heads/${{ steps.gh.outputs.branch }}';
            process.env.GITHUB_SHA='${{ steps.gh.outputs.sha }}';
            try {
              // install nbgv isn' required
              // the image includes nbgv [actions/runner-images](https://github.com/actions/runner-images)

              // collect a JSON string of all the version properties.
              let versionJson = '';
              await exec.exec('nbgv', ['get-version', '-f', 'json'], { listeners: { stdout: (data) => { versionJson += data.toString() } } });
              core.setOutput('versionJson', versionJson);

              // break up the JSON into individual outputs.
              const versionProperties = JSON.parse(versionJson);
              for (let name in versionProperties.CloudBuildAllVars) {
                // Trim off the leading NBGV_
                core.setOutput(name.substring(5), versionProperties.CloudBuildAllVars[name]);
              }
              await exec.exec('nbgv', ['cloud', '-a']);
            }
            catch (error) {
              core.setFailed(error.message);
            }

      - name: Print version
        run: |-
          echo "SemVer2 ${{ steps.nbgv.outputs.SemVer2 }}"

      - name: Verify the public branch name matches version.json
        if: ${{ github.event_name == 'push' && steps.nbgv.outputs.PublicRelease == 'True' && endsWith(github.ref, steps.nbgv.outputs.MajorMinorVersion) != true && steps.gh.outputs.branch != 'master' }}
        run: |
          echo "::error::The branch name ${{ steps.gh.outputs.branch }} does not match version.json: ${{ steps.nbgv.outputs.MajorMinorVersion }}"
          exit 1

      - name: Verify that non-public branch has a prerelease suffix in version.json
        if: ${{ steps.nbgv.outputs.PublicRelease == 'False' && steps.nbgv.outputs.PrereleaseVersionNoLeadingHyphen == '' }}
        run: |
          echo "::error::The non-public branch ${{ steps.gh.outputs.branch }} must have a prerelease suffix in version.json: ${{ steps.nbgv.outputs.MajorMinorVersion }}"
          exit 1

      - name: Verify that master branch has a prerelease suffix in version.json
        if: ${{ steps.gh.outputs.branch == 'master' && steps.nbgv.outputs.PrereleaseVersionNoLeadingHyphen == '' }}
        run: |
          echo "::error::The master branch ${{ steps.gh.outputs.branch }} must have a prerelease suffix in version.json: ${{ steps.nbgv.outputs.MajorMinorVersion }}"
          exit 1

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |-
            act:
              - 'Dockerfile.act-dotnet-noble'
            aspnetcore:
              - 'Dockerfile.dotnet-aspnetcore-base'

      - name: Set up Docker Buildx
        if: ${{ github.event_name == 'workflow_dispatch' || steps.changes.outputs.act == 'true' || steps.changes.outputs.aspnetcore == 'true' }}
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name == 'workflow_dispatch' || steps.changes.outputs.act == 'true' || steps.changes.outputs.aspnetcore == 'true' }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: docker build & publish / act-dotnet-noble
        if: ${{ github.event_name == 'workflow_dispatch' || steps.changes.outputs.act == 'true' }}
        run: >-
          echo -e "\033[32mBuild & publish act-dotnet-noble\033[0m"

          docker buildx build --file Dockerfile.act-dotnet-noble .
          --platform=linux/amd64,linux/arm64
          --build-arg IMAGE_CREATED=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          --build-arg IMAGE_REVISION=${{ steps.gh.outputs.sha }}
          --build-arg IMAGE_VERSION=${{ steps.nbgv.outputs.SemVer2 }}
          --provenance=false
          --compress
          --push
          -t ghcr.io/vchirikov/act-dotnet-noble:${{ steps.nbgv.outputs.SemVer2 }}

      - name: docker build & publish / dotnet-aspnetcore-base
        if: ${{ github.event_name == 'workflow_dispatch' || steps.changes.outputs.act == 'true' }}
        run: >-
          echo -e "\033[32mBuild & publish dotnet-aspnetcore-base\033[0m"

          docker buildx build --file Dockerfile.dotnet-aspnetcore-base .
          --platform=linux/amd64,linux/arm64
          --build-arg IMAGE_CREATED=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          --build-arg IMAGE_REVISION=${{ steps.gh.outputs.sha }}
          --build-arg IMAGE_VERSION=${{ steps.nbgv.outputs.SemVer2 }}
          --provenance=false
          --compress
          --push
          -t ghcr.io/vchirikov/dotnet-aspnetcore-base:${{ steps.nbgv.outputs.SemVer2 }}
